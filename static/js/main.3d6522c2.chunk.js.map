{"version":3,"sources":["components/context/index.js","config.js","components/Nav.js","components/SearchForm.js","components/GalleryItem.js","components/NotFound.js","components/Gallery.js","components/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["PhotoContext","React","createContext","Provider","Consumer","apiKey","Nav","context","handleSearch","e","performSearch","target","innerText","loading","console","log","className","to","onClick","SearchForm","state","searchText","onSearchChange","setState","value","handleSubmit","preventDefault","queryValue","query","path","props","history","push","currentTarget","reset","onSubmit","type","onChange","name","ref","input","placeholder","required","fill","height","viewBox","width","xmlns","d","Component","withRouter","GalleryItem","url","title","src","alt","NotFound","Gallery","photos","queryText","match","params","result","data","length","map","photo","key","id","farm","server","secret","PureComponent","PageNotFound","App","axios","get","then","resData","catch","error","createBrowserHistory","location","pathname","replace","this","basename","exact","render","component","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d6522c2.chunk.js","sourcesContent":["import React from 'react';\n//create context to pass instead of props\nconst PhotoContext = React.createContext();\n\nexport const Provider = PhotoContext.Provider;\nexport const Consumer = PhotoContext.Consumer;","const apiKey = 'e196b9fb6a8f8b58f927825a0c0fecdd';\n// const secret = '43f1d1778ec48bd3';\n\n\nexport default apiKey;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Consumer } from './context';\n\nconst Nav = () => {\n  return (\n    <Consumer>\n      { context => {\n        // run performsearch when a link is clicked\n        let handleSearch = (e) => {\n          context.performSearch(e.target.innerText);\n          context.loading = true; // is set to true so that the text \"loanding\" appears\n          console.log(context.loading);\n        };\n\n        return(\n          <nav className=\"main-nav\">\n            <ul>\n              <li>{/*the \"to\" sends the :query value to <gallery> to display the text in the title*/}\n              <NavLink to=\"/search/waterfalls\" onClick={handleSearch}>Waterfalls</NavLink>\n              </li>\n              <li>\n              <NavLink to=\"/search/puppies\" onClick={handleSearch}>Puppies</NavLink>\n              </li>\n              <li>\n              <NavLink to=\"/search/sunsets\" onClick={handleSearch}>Sunsets</NavLink>\n              </li>\n            </ul>\n          </nav>\n        );\n      }}\n    </Consumer>\n  );\n}\n\nexport default Nav;","import React, { Component }  from 'react';\nimport { Consumer } from './context';\nimport { withRouter } from 'react-router-dom';\n\nclass SearchForm extends Component {\n  state = {\n    searchText: ''\n  }\n\nrender(){\n  return (\n    <Consumer>\n      { context => {\n        this.onSearchChange = e => {\n          this.setState({ searchText: e.target.value });\n        }\n\n        /* obtains the value of the input, creates a \"path\" with that value, pushes it to the url, and runs\n        performsearch and reset the input */\n        this.handleSubmit = e => {\n          e.preventDefault();\n          let queryValue = this.query.value;\n          let path = `/search/${queryValue}`;\n          this.props.history.push(path);\n\n          context.loading = true; // is set to true so that the text \"loading\" appears\n          context.performSearch(queryValue);\n          e.currentTarget.reset();\n        }\n\n        return(\n          <form className=\"search-form\" onSubmit={this.handleSubmit}>\n            <input type=\"search\"\n                    onChange={this.onSearchChange}\n                    name=\"search\"\n                    ref={ (input) => this.query = input }\n                    placeholder=\"Search\"\n                    required />\n            <button type=\"submit\" className=\"search-button\">\n              <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n                <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n              </svg>\n            </button>\n          </form>\n        );\n      }}\n    </Consumer>\n  );\n}\n}\n\nexport default withRouter(SearchForm);","import React from 'react';\n\n//setup the galleryItems that will display in the Gallery.js container\nconst GalleryItem = ({ url, title }) => {\n  return(\n    <li>\n      <img src={ url } alt={ title } />\n    </li>\n  );\n}\n\nexport default GalleryItem;","\nimport React from 'react';\n\n//element to be displayed if there search results are === 0\nconst NotFound = () => {\n  return(\n    <li className=\"not-found\">\n      <h3>No Results Found</h3>\n      <p>You search did not return any results. Please try again.</p>\n    </li>\n  );\n}\n\n\nexport default NotFound;","import React, { PureComponent } from 'react';\nimport { Consumer } from './context';\nimport GalleryItem from './GalleryItem';\nimport NotFound from './NotFound';\n\n\nclass Gallery extends PureComponent  {\nrender(){\n  return (\n    <Consumer>\n      { context => {\n        let photos;\n        let queryText = this.props.match.params.query; // gets the value of :query for the title\n        const result = context.data; //we save the data in the result variable\n\n        if (result.length > 0) { // if the results found are greater than 0 the images are displayed\n          photos = result.map(photo =>\n             <GalleryItem\n              key={ photo.id }\n              url={ `https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg` }\n              title= { photo.title }\n              />\n          );\n        } else { // if not, the component <NotFound> is displayed\n          photos = <NotFound />;\n        }\n\n        return( //after the data is mapped, return to the container with either a loading message or the photos array obj\n          <div className=\"photo-container\">\n            <h2>{ queryText }</h2>\n                <ul> \n                  {(context.loading) ? <h3 className=\"loading\">Loading....</h3> : photos }\n                </ul>\n          </div>\n        );\n      }}\n    </Consumer>\n  );\n}\n}\n\n\nexport default Gallery;","\nimport React from 'react';\n\nconst PageNotFound = () => {\n  return(\n    <li className=\"not-found\">\n      <h3>Page Not Found</h3>\n      <h2>404</h2>\n      <p>The page you are trying to enter cannot be found. Please try again.</p>\n    </li>\n  );\n}\n\nexport default PageNotFound;","import React, { Component } from 'react';\nimport { Provider } from './components/context';\nimport { createBrowserHistory } from \"history\";\nimport axios from 'axios';\nimport apiKey from './config';\nimport {\n  HashRouter,\n  Route,\n  Redirect,\n  Switch\n} from 'react-router-dom';\n\nimport Nav from './components/Nav';\nimport SearchForm from './components/SearchForm';\nimport Gallery from './components/Gallery';\nimport PageNotFound from './components/PageNotFound';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      photo: [],\n      loading: true\n    }\n  }\n\n  componentDidMount() {\n    const history = createBrowserHistory();\n    let url = history.location.pathname.replace(/[^\\w\\s]/gi, '').replace(\"search\", '');\n    this.performSearch(url);\n  }\n\n  performSearch = (query = \"waterfalls\") => {\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&content_type=1&per_page=24&format=json&nojsoncallback=1`)\n      .then(resData => {\n        console.log(resData)\n        this.setState({\n          photo: resData.data.photos.photo,\n          loading: false\n        });\n      })\n      .catch(error => {\n        console.log(\"Error fetching and parsing data\", error);\n      });\n  }\n\n  render() {\n    return (\n      // we use the <Provider> to send the current state of the data and the function performSearch\n      <Provider value={{\n        data: this.state.photo,\n        loading: this.state.loading,\n        performSearch: this.performSearch\n      }}>\n        <HashRouter basename=\"/search/waterfalls\">\n          <div className=\"container\">\n            <SearchForm />\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" render={() => <Redirect to='/search/waterfalls' /> } />\n              <Route path=\"/search/:query\" render={(props) => // if loading is true h3 is displayed, else the gallery is shown\n                (this.state.loading) ? <h3 className=\"loading\">Loading....</h3> : <Gallery {...props} />\n              } />\n              <Route component={PageNotFound} /> {/*only appears when no route matches*/}\n            </Switch>\n          </div>\n        </HashRouter>\n    </Provider>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}